import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from config import BOT_TOKEN, WEATHER_API_KEY, WORKOUT_CALORIES, LOG_LEVEL
from models import UserProfile
from utils import get_temperature, get_food_info, generate_progress_charts
from datetime import datetime


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=LOG_LEVEL, format='%(asctime)s - %(levelname)s - %(message)s')


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥—ã
class FoodLogging(StatesGroup):
    waiting_for_weight = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users: dict[int, UserProfile] = {}

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_profile - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water <–º–ª> - –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É\n"
        "/log_food <–ø—Ä–æ–¥—É–∫—Ç> - –∑–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç\n"
        "/log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã> - –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/charts - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üìä"
    )

@router.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /set_profile –æ—Ç {message.from_user.id}")
    await state.set_state(ProfileSetup.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

@router.message(ProfileSetup.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await state.set_state(ProfileSetup.height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(ProfileSetup.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        await state.update_data(height=height)
        await state.set_state(ProfileSetup.age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(ProfileSetup.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await state.set_state(ProfileSetup.activity)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(ProfileSetup.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        await state.update_data(activity=activity)
        await state.set_state(ProfileSetup.city)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(ProfileSetup.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = UserProfile(
        user_id=user_id,
        weight=user_data['weight'],
        height=user_data['height'],
        age=user_data['age'],
        activity_minutes=user_data['activity'],
        city=city
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã
        temp = await get_temperature(city, WEATHER_API_KEY)
        if temp is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")

        profile.water_goal = profile.calculate_water_goal(temp)
        profile.calorie_goal = profile.calculate_calorie_goal()
        users[user_id] = profile
        
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
            f"üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {profile.water_goal:.0f} –º–ª\n"
            f"üî• –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {profile.calorie_goal:.0f} –∫–∫–∞–ª\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/log_water <–º–ª> - –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É\n"
            "/log_food <–ø—Ä–æ–¥—É–∫—Ç> - –∑–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç\n"
            "/log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã> - –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
            "/check_progress - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "/charts - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üìä"
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: Moscow, London, New York"
        )

@router.message(Command("log_water"))
async def cmd_log_water(message: Message, command: CommandObject):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /log_water –æ—Ç {message.from_user.id}")
    if not command.args:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: /log_water 250")
        return

    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        water_amount = float(command.args)
        users[user_id].logged_water += water_amount
        remaining = users[user_id].water_goal - users[user_id].logged_water
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {water_amount} –º–ª –≤–æ–¥—ã\n"
            f"üíß –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {max(0, remaining)} –º–ª"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(Command("log_food"))
async def cmd_log_food(message: Message, command: CommandObject, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /log_food –æ—Ç {message.from_user.id}")
    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω"
        )
        return

    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    food_info = await get_food_info(command.args)
    if not food_info:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ."
        )
        return

    try:
        await state.update_data(
            food_name=food_info["name"],
            calories_per_100=float(food_info["calories"])
        )
        await state.set_state(FoodLogging.waiting_for_weight)
        await message.answer(
            f"üçé {food_info['name']}\n"
            f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {food_info['calories']:.1f} –∫–∫–∞–ª –Ω–∞ 100 –≥\n"
            "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
    except Exception as e:
        print(f"Error processing food info: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç."
        )

@router.message(Command("check_progress"))
async def cmd_check_progress(message: Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /check_progress –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    user = users[user_id]
    await message.answer(
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {user.logged_water} –º–ª –∏–∑ {user.water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {max(0, user.water_goal - user.logged_water)} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user.logged_calories} –∫–∫–∞–ª –∏–∑ {user.calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {user.burned_calories} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {user.logged_calories - user.burned_calories} –∫–∫–∞–ª."
    )

@router.message(Command("log_workout"))
async def cmd_log_workout(message: Message, command: CommandObject):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /log_workout –æ—Ç {message.from_user.id}")
    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: –±–µ–≥, —Ö–æ–¥—å–±–∞, –ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Å–∏–ø–µ–¥, –π–æ–≥–∞, —Å–∏–ª–æ–≤–∞—è"
        )
        return

    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        workout_type, duration = command.args.split()
        duration = int(duration)
        
        if workout_type not in WORKOUT_CALORIES:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑: –±–µ–≥, —Ö–æ–¥—å–±–∞, –ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Å–∏–ø–µ–¥, –π–æ–≥–∞, —Å–∏–ª–æ–≤–∞—è")
            return
            
        calories_burned = WORKOUT_CALORIES[workout_type] * duration
        water_needed = (duration // 30) * 200  # 200–º–ª –≤–æ–¥—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        
        users[user_id].burned_calories += calories_burned
        users[user_id].workout_log.append({
            "type": workout_type,
            "duration": duration,
            "calories": calories_burned,
            "timestamp": datetime.now().isoformat()
        })
        
        await message.answer(
            f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {duration} –º–∏–Ω—É—Ç\n"
            f"- –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned} –∫–∫–∞–ª\n"
            f"üíß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–∏—Ç—å: {water_needed} –º–ª –≤–æ–¥—ã"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")

@router.message(FoodLogging.waiting_for_weight)
async def process_food_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        food_data = await state.get_data()
        calories = food_data['calories_per_100'] * weight / 100
        
        user_id = message.from_user.id
        users[user_id].logged_calories += calories
        users[user_id].food_log.append({
            "name": food_data['food_name'],
            "weight": weight,
            "calories": calories,
            "timestamp": datetime.now().isoformat()
        })
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {food_data['food_name']}\n"
            f"- –í–µ—Å: {weight} –≥\n"
            f"- –ö–∞–ª–æ—Ä–∏–∏: {calories:.1f} –∫–∫–∞–ª"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º.")

@router.message(Command("charts"))
async def cmd_charts(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /charts –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        buffer = await generate_progress_charts(users[user_id])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
        photo = BufferedInputFile(
            buffer.getvalue(),
            filename="progress_charts.png"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
        await message.answer_photo(
            photo,
            caption=(
                "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"üíß –í–æ–¥–∞: {users[user_id].logged_water}/{users[user_id].water_goal} –º–ª\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–∏: {users[user_id].logged_calories}/{users[user_id].calorie_goal} –∫–∫–∞–ª\n"
                f"üí™ –°–æ–∂–∂–µ–Ω–æ: {users[user_id].burned_calories} –∫–∫–∞–ª"
            )
        )
    except Exception as e:
        print(f"Error generating charts: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

@router.message()
async def log_message(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
