import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, BaseMiddleware
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from config import BOT_TOKEN, WATER_PER_WORKOUT, WEATHER_API_KEY, WORKOUT_CALORIES, logger
from models import UserProfile
from utils import get_temperature, get_food_info, generate_progress_charts, get_food_info_from_fs
from datetime import datetime


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥—ã
class FoodLogging(StatesGroup):
    waiting_for_weight = State()
    waiting_for_food_name = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–¥—ã
class WaterLogging(StatesGroup):
    waiting_for_water = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
class WorkoutLogging(StatesGroup):
    waiting_for_workout_type = State()
    waiting_for_workout_duration = State()
    commit_workout = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users: dict[int, UserProfile] = {}

router = Router()


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class CheckUserProfileMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        user_id = event.from_user.id
        
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
        allowed_commands = ['/set_profile', '/start', '/help']
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if ((event.text and any(event.text.startswith(cmd) for cmd in allowed_commands)) or 
            isinstance(data.get('state'), ProfileSetup) or
            data.get('raw_state') is not None and data['raw_state'].startswith('ProfileSetup')):
            return await handler(event, data)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if user_id not in users:
            await event.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
            return
            
        return await handler(event, data)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.from_user.id}: {event.text}")
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
router.message.middleware(LoggingMiddleware())
router.message.middleware(CheckUserProfileMiddleware()) 

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_profile - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water <–º–ª> - –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É\n"
        "/log_food <–ø—Ä–æ–¥—É–∫—Ç> - –∑–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç\n"
        "/log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã> - –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/charts - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üìä"
    )
    
@router.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    await state.set_state(ProfileSetup.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

@router.message(ProfileSetup.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await state.set_state(ProfileSetup.height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(ProfileSetup.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        await state.update_data(height=height)
        await state.set_state(ProfileSetup.age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(ProfileSetup.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await state.set_state(ProfileSetup.activity)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    
@router.message(ProfileSetup.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        await state.update_data(activity=activity)
        await state.set_state(ProfileSetup.city)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    
@router.message(ProfileSetup.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = UserProfile(
        user_id=user_id,
        weight=user_data['weight'],
        height=user_data['height'],
        age=user_data['age'],
        activity_minutes=user_data['activity'],
        city=city
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã
        temp = await get_temperature(city, WEATHER_API_KEY)
        if temp is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")

        profile.water_goal = profile.calculate_water_goal(temp)
        profile.calorie_goal = profile.calculate_calorie_goal()
        users[user_id] = profile
        
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
            f"üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: {profile.water_goal:.0f} –º–ª\n"
            f"üî• –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {profile.calorie_goal:.0f} –∫–∫–∞–ª\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/log_water <–º–ª> - –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É üíß\n"
            "/log_food <–ø—Ä–æ–¥—É–∫—Ç> - –∑–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç üçΩ\n"
            "/log_workout <—Ç–∏–ø> <–º–∏–Ω—É—Ç—ã> - –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üèÉ‚Äç‚ôÇÔ∏è\n"
            "/check_progress - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å üèÅ\n"
            "/charts - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üìä"
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: Moscow, London, New York"
        )

@router.message(Command("log_water"))
async def cmd_log_water(message: Message, command: CommandObject, state: FSMContext):
    logger.debug(f"command.args: {command.args}")
    if not command.args:
        await state.set_state(WaterLogging.waiting_for_water)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–ª:")
        return

    user_id = message.from_user.id

    # –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –æ–±—ä–µ–º –≤–æ–¥—ã –≤—Å–µ-—Ä–∞–≤–Ω–æ
    # –±—É–¥–µ—Ç –≤ command.args - –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è WaterLogging
    water_text = command.args
    logger.debug(f"water_text: {water_text}")
    try:
        water_amount = float(water_text)
        users[user_id].logged_water += water_amount
        remaining = users[user_id].water_goal - users[user_id].logged_water
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {water_amount} –º–ª –≤–æ–¥—ã\n"
            f"üíß –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {max(0, remaining)} –º–ª"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(WaterLogging.waiting_for_water)
async def process_water_logging(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    await cmd_log_water(message, CommandObject(prefix="/", command="log_water", args=message.text), state)


@router.message(Command("log_food"))
async def cmd_log_food(message: Message, command: CommandObject, state: FSMContext):
    logger.debug(f"command.args: {command.args}")
    if not command.args:
        await state.set_state(FoodLogging.waiting_for_food_name)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏)."
        )
        return

    user_id = message.from_user.id

    # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ OpenFoodFacts
    # food_info = await get_food_info(command.args)

    # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ FatSecret
    food_info = await get_food_info_from_fs(command.args)

    if not food_info:
        logger.error("–ù–µ –Ω–∞—à–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: {}".format(command.args))
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ."
        )
        return
    if food_info.get("error"):
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {food_info['name']}\n"
        error_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ."
        if food_info.get("suggest"):
            error_message += f"\n**–í–Ω–∏–º–∞–Ω–∏–µ**: {food_info['suggest']}"
        await message.answer(error_message)
        return
    try:
        await state.update_data(
            food_name=food_info["name"],
            calories_per_100=float(food_info["calories"])
        )
        await state.set_state(FoodLogging.waiting_for_weight)
        await message.answer(
            f"üçé {food_info['name']}\n"
            f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {food_info['calories']:.1f} –∫–∫–∞–ª/100–≥\n"
            "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç."
        )


@router.message(FoodLogging.waiting_for_food_name)
async def process_food_name(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    await cmd_log_food(message, CommandObject(prefix="/", command="log_food", args=message.text), state)
    

@router.message(FoodLogging.waiting_for_weight)
async def process_food_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        food_data = await state.get_data()
        calories = food_data['calories_per_100'] * weight / 100
        
        user_id = message.from_user.id
        users[user_id].logged_calories += calories
        users[user_id].food_log.append({
            "name": food_data['food_name'],
            "weight": weight,
            "calories": calories,
            "timestamp": datetime.now().isoformat()
        })
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {food_data['food_name']}\n"
            f"- –í–µ—Å: {weight} –≥\n"
            f"- –ö–∞–ª–æ—Ä–∏–∏: {calories:.1f} –∫–∫–∞–ª"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö —á–∏—Å–ª–æ–º.")


async def validate_workout_type(message: Message, workout_type: str | None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π"""
    if not workout_type or workout_type not in WORKOUT_CALORIES:
        await message.answer(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: " + ", ".join(WORKOUT_CALORIES.keys())
        )
        return False
    return True

@router.message(WorkoutLogging.waiting_for_workout_type)
async def process_workout_type(message: Message, state: FSMContext):
    logger.debug(f":: WorkoutLogging.waiting_for_workout_type : message.text: {message.text}")
    if not await validate_workout_type(message, message.text):
        return
    
    await state.update_data(workout_type=message.text)
    await state.set_state(WorkoutLogging.waiting_for_workout_duration)
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å?")


@router.message(WorkoutLogging.waiting_for_workout_duration)
async def process_workout_duration(message: Message, state: FSMContext):
    logger.debug(f":: WorkoutLogging.waiting_for_workout_duration : message.text: {message.text}")
    try:
        workout_duration = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö.")
        return

    await state.update_data(workout_duration=workout_duration)
    await state.set_state(WorkoutLogging.commit_workout)
    await cmd_log_workout(message, CommandObject(prefix="/", command="log_workout"), state)


@router.message(Command("log_workout"))
async def cmd_log_workout(message: Message, command: CommandObject, state: FSMContext):
    logger.debug(f"command.args: {command.args}")
    
    state_data = await state.get_data()
    logger.debug(f"state_data: {state_data}")
    
    current_state = await state.get_state()
    if current_state != WorkoutLogging.commit_workout:
        if state_data.get('workout_type', None) is None:
            if command.args:
                if await validate_workout_type(message, command.args):
                    await state.update_data(workout_type=command.args)
                    await state.set_state(WorkoutLogging.waiting_for_workout_duration)
                    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å?")
                return
            else:
                await state.set_state(WorkoutLogging.waiting_for_workout_type)
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: " + ", ".join(WORKOUT_CALORIES.keys())
                )
            return
        if state_data.get('workout_duration', None) is None:
            await state.set_state(WorkoutLogging.waiting_for_workout_duration)
            await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å?")
            return
        return

    user_id = message.from_user.id
    workout_type = state_data['workout_type']
    workout_duration = state_data['workout_duration']

    try:
        calories_burned = WORKOUT_CALORIES[workout_type] * workout_duration
        water_needed = (workout_duration // 30) * WATER_PER_WORKOUT  # 200–º–ª –≤–æ–¥—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        
        users[user_id].burned_calories += calories_burned
        users[user_id].workout_log.append({
            "type": workout_type,
            "duration": workout_duration,
            "calories": calories_burned,
            "timestamp": datetime.now().isoformat()
        })
        await state.clear()
        await message.answer(
            f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {workout_duration} –º–∏–Ω—É—Ç\n"
            f"- –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned} –∫–∫–∞–ª\n"
            f"üíß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–∏—Ç—å: {water_needed} –º–ª –≤–æ–¥—ã"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")


@router.message(Command("check_progress"))
async def cmd_check_progress(message: Message):
    user_id = message.from_user.id
    user = users[user_id]
    await message.answer(
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {user.logged_water} –º–ª –∏–∑ {user.water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {max(0, user.water_goal - user.logged_water)} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user.logged_calories} –∫–∫–∞–ª –∏–∑ {user.calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {user.burned_calories} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {user.logged_calories - user.burned_calories} –∫–∫–∞–ª."
    )


@router.message(Command("charts"))
async def cmd_charts(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = message.from_user.id

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        buffer = await generate_progress_charts(users[user_id])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        photo = BufferedInputFile(
            buffer.getvalue(),
            filename="progress_charts.png"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–¥–ø–∏—Å—å—é
        await message.answer_photo(
            photo,
            caption=(
                "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"üíß –í–æ–¥–∞: {users[user_id].logged_water}/{users[user_id].water_goal} –º–ª\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–∏: {users[user_id].logged_calories}/{users[user_id].calorie_goal} –∫–∫–∞–ª\n"
                f"üí™ –°–æ–∂–∂–µ–Ω–æ: {users[user_id].burned_calories} –∫–∫–∞–ª"
            )
        )
    except Exception as e:
        print(f"Error generating charts: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()
        dp.include_router(router)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
